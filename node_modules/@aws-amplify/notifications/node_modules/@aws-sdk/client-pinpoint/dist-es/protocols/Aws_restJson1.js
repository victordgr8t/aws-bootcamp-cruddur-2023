import { __assign, __awaiter, __generator, __read } from "tslib";
import { HttpRequest as __HttpRequest } from "@aws-sdk/protocol-http";
import { decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, limitedParseDouble as __limitedParseDouble, map as __map, parseRfc3339DateTime as __parseRfc3339DateTime, resolvedPath as __resolvedPath, serializeFloat as __serializeFloat, throwDefaultError, } from "@aws-sdk/smithy-client";
import { BadRequestException, ConflictException, ForbiddenException, InternalServerErrorException, MethodNotAllowedException, NotFoundException, PayloadTooLargeException, TooManyRequestsException, } from "../models/models_0";
import { PinpointServiceException as __BaseException } from "../models/PinpointServiceException";
export var serializeAws_restJson1CreateAppCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps";
                if (input.CreateApplicationRequest !== undefined) {
                    body = serializeAws_restJson1CreateApplicationRequest(input.CreateApplicationRequest, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1CreateCampaignCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/campaigns";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                if (input.WriteCampaignRequest !== undefined) {
                    body = serializeAws_restJson1WriteCampaignRequest(input.WriteCampaignRequest, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1CreateEmailTemplateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/templates/{TemplateName}/email";
                resolvedPath = __resolvedPath(resolvedPath, input, "TemplateName", function () { return input.TemplateName; }, "{TemplateName}", false);
                if (input.EmailTemplateRequest !== undefined) {
                    body = serializeAws_restJson1EmailTemplateRequest(input.EmailTemplateRequest, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1CreateExportJobCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/jobs/export";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                if (input.ExportJobRequest !== undefined) {
                    body = serializeAws_restJson1ExportJobRequest(input.ExportJobRequest, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1CreateImportJobCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/jobs/import";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                if (input.ImportJobRequest !== undefined) {
                    body = serializeAws_restJson1ImportJobRequest(input.ImportJobRequest, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1CreateInAppTemplateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/templates/{TemplateName}/inapp";
                resolvedPath = __resolvedPath(resolvedPath, input, "TemplateName", function () { return input.TemplateName; }, "{TemplateName}", false);
                if (input.InAppTemplateRequest !== undefined) {
                    body = serializeAws_restJson1InAppTemplateRequest(input.InAppTemplateRequest, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1CreateJourneyCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/journeys";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                if (input.WriteJourneyRequest !== undefined) {
                    body = serializeAws_restJson1WriteJourneyRequest(input.WriteJourneyRequest, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1CreatePushTemplateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/templates/{TemplateName}/push";
                resolvedPath = __resolvedPath(resolvedPath, input, "TemplateName", function () { return input.TemplateName; }, "{TemplateName}", false);
                if (input.PushNotificationTemplateRequest !== undefined) {
                    body = serializeAws_restJson1PushNotificationTemplateRequest(input.PushNotificationTemplateRequest, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1CreateRecommenderConfigurationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/recommenders";
                if (input.CreateRecommenderConfiguration !== undefined) {
                    body = serializeAws_restJson1CreateRecommenderConfigurationShape(input.CreateRecommenderConfiguration, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1CreateSegmentCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/segments";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                if (input.WriteSegmentRequest !== undefined) {
                    body = serializeAws_restJson1WriteSegmentRequest(input.WriteSegmentRequest, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1CreateSmsTemplateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/templates/{TemplateName}/sms";
                resolvedPath = __resolvedPath(resolvedPath, input, "TemplateName", function () { return input.TemplateName; }, "{TemplateName}", false);
                if (input.SMSTemplateRequest !== undefined) {
                    body = serializeAws_restJson1SMSTemplateRequest(input.SMSTemplateRequest, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1CreateVoiceTemplateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/templates/{TemplateName}/voice";
                resolvedPath = __resolvedPath(resolvedPath, input, "TemplateName", function () { return input.TemplateName; }, "{TemplateName}", false);
                if (input.VoiceTemplateRequest !== undefined) {
                    body = serializeAws_restJson1VoiceTemplateRequest(input.VoiceTemplateRequest, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DeleteAdmChannelCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/channels/adm";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DeleteApnsChannelCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/channels/apns";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DeleteApnsSandboxChannelCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/apps/{ApplicationId}/channels/apns_sandbox";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DeleteApnsVoipChannelCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/apps/{ApplicationId}/channels/apns_voip";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DeleteApnsVoipSandboxChannelCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/apps/{ApplicationId}/channels/apns_voip_sandbox";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DeleteAppCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DeleteBaiduChannelCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/channels/baidu";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DeleteCampaignCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/apps/{ApplicationId}/campaigns/{CampaignId}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "CampaignId", function () { return input.CampaignId; }, "{CampaignId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DeleteEmailChannelCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/channels/email";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DeleteEmailTemplateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/templates/{TemplateName}/email";
                resolvedPath = __resolvedPath(resolvedPath, input, "TemplateName", function () { return input.TemplateName; }, "{TemplateName}", false);
                query = map({
                    version: [, input.Version],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DeleteEndpointCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/apps/{ApplicationId}/endpoints/{EndpointId}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "EndpointId", function () { return input.EndpointId; }, "{EndpointId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DeleteEventStreamCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/eventstream";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DeleteGcmChannelCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/channels/gcm";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DeleteInAppTemplateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/templates/{TemplateName}/inapp";
                resolvedPath = __resolvedPath(resolvedPath, input, "TemplateName", function () { return input.TemplateName; }, "{TemplateName}", false);
                query = map({
                    version: [, input.Version],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DeleteJourneyCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/apps/{ApplicationId}/journeys/{JourneyId}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "JourneyId", function () { return input.JourneyId; }, "{JourneyId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DeletePushTemplateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/templates/{TemplateName}/push";
                resolvedPath = __resolvedPath(resolvedPath, input, "TemplateName", function () { return input.TemplateName; }, "{TemplateName}", false);
                query = map({
                    version: [, input.Version],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DeleteRecommenderConfigurationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/recommenders/{RecommenderId}";
                resolvedPath = __resolvedPath(resolvedPath, input, "RecommenderId", function () { return input.RecommenderId; }, "{RecommenderId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DeleteSegmentCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/apps/{ApplicationId}/segments/{SegmentId}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "SegmentId", function () { return input.SegmentId; }, "{SegmentId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DeleteSmsChannelCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/channels/sms";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DeleteSmsTemplateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/templates/{TemplateName}/sms";
                resolvedPath = __resolvedPath(resolvedPath, input, "TemplateName", function () { return input.TemplateName; }, "{TemplateName}", false);
                query = map({
                    version: [, input.Version],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DeleteUserEndpointsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/users/{UserId}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "UserId", function () { return input.UserId; }, "{UserId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DeleteVoiceChannelCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/channels/voice";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DeleteVoiceTemplateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/templates/{TemplateName}/voice";
                resolvedPath = __resolvedPath(resolvedPath, input, "TemplateName", function () { return input.TemplateName; }, "{TemplateName}", false);
                query = map({
                    version: [, input.Version],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetAdmChannelCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/channels/adm";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetApnsChannelCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/channels/apns";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetApnsSandboxChannelCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/apps/{ApplicationId}/channels/apns_sandbox";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetApnsVoipChannelCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/apps/{ApplicationId}/channels/apns_voip";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetApnsVoipSandboxChannelCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/apps/{ApplicationId}/channels/apns_voip_sandbox";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetAppCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetApplicationDateRangeKpiCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/apps/{ApplicationId}/kpis/daterange/{KpiName}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "KpiName", function () { return input.KpiName; }, "{KpiName}", false);
                query = map({
                    "end-time": [function () { return input.EndTime !== void 0; }, function () { return (input.EndTime.toISOString().split(".")[0] + "Z").toString(); }],
                    "next-token": [, input.NextToken],
                    "page-size": [, input.PageSize],
                    "start-time": [
                        function () { return input.StartTime !== void 0; },
                        function () { return (input.StartTime.toISOString().split(".")[0] + "Z").toString(); },
                    ],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetApplicationSettingsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/settings";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetAppsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps";
                query = map({
                    "page-size": [, input.PageSize],
                    token: [, input.Token],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetBaiduChannelCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/channels/baidu";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetCampaignCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/apps/{ApplicationId}/campaigns/{CampaignId}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "CampaignId", function () { return input.CampaignId; }, "{CampaignId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetCampaignActivitiesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/apps/{ApplicationId}/campaigns/{CampaignId}/activities";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "CampaignId", function () { return input.CampaignId; }, "{CampaignId}", false);
                query = map({
                    "page-size": [, input.PageSize],
                    token: [, input.Token],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetCampaignDateRangeKpiCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/apps/{ApplicationId}/campaigns/{CampaignId}/kpis/daterange/{KpiName}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "CampaignId", function () { return input.CampaignId; }, "{CampaignId}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "KpiName", function () { return input.KpiName; }, "{KpiName}", false);
                query = map({
                    "end-time": [function () { return input.EndTime !== void 0; }, function () { return (input.EndTime.toISOString().split(".")[0] + "Z").toString(); }],
                    "next-token": [, input.NextToken],
                    "page-size": [, input.PageSize],
                    "start-time": [
                        function () { return input.StartTime !== void 0; },
                        function () { return (input.StartTime.toISOString().split(".")[0] + "Z").toString(); },
                    ],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetCampaignsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/campaigns";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                query = map({
                    "page-size": [, input.PageSize],
                    token: [, input.Token],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetCampaignVersionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/apps/{ApplicationId}/campaigns/{CampaignId}/versions/{Version}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "CampaignId", function () { return input.CampaignId; }, "{CampaignId}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "Version", function () { return input.Version; }, "{Version}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetCampaignVersionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/apps/{ApplicationId}/campaigns/{CampaignId}/versions";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "CampaignId", function () { return input.CampaignId; }, "{CampaignId}", false);
                query = map({
                    "page-size": [, input.PageSize],
                    token: [, input.Token],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetChannelsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/channels";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetEmailChannelCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/channels/email";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetEmailTemplateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/templates/{TemplateName}/email";
                resolvedPath = __resolvedPath(resolvedPath, input, "TemplateName", function () { return input.TemplateName; }, "{TemplateName}", false);
                query = map({
                    version: [, input.Version],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetEndpointCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/apps/{ApplicationId}/endpoints/{EndpointId}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "EndpointId", function () { return input.EndpointId; }, "{EndpointId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetEventStreamCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/eventstream";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetExportJobCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/apps/{ApplicationId}/jobs/export/{JobId}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "JobId", function () { return input.JobId; }, "{JobId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetExportJobsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/jobs/export";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                query = map({
                    "page-size": [, input.PageSize],
                    token: [, input.Token],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetGcmChannelCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/channels/gcm";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetImportJobCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/apps/{ApplicationId}/jobs/import/{JobId}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "JobId", function () { return input.JobId; }, "{JobId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetImportJobsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/jobs/import";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                query = map({
                    "page-size": [, input.PageSize],
                    token: [, input.Token],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetInAppMessagesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/apps/{ApplicationId}/endpoints/{EndpointId}/inappmessages";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "EndpointId", function () { return input.EndpointId; }, "{EndpointId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetInAppTemplateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/templates/{TemplateName}/inapp";
                resolvedPath = __resolvedPath(resolvedPath, input, "TemplateName", function () { return input.TemplateName; }, "{TemplateName}", false);
                query = map({
                    version: [, input.Version],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetJourneyCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/apps/{ApplicationId}/journeys/{JourneyId}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "JourneyId", function () { return input.JourneyId; }, "{JourneyId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetJourneyDateRangeKpiCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/apps/{ApplicationId}/journeys/{JourneyId}/kpis/daterange/{KpiName}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "JourneyId", function () { return input.JourneyId; }, "{JourneyId}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "KpiName", function () { return input.KpiName; }, "{KpiName}", false);
                query = map({
                    "end-time": [function () { return input.EndTime !== void 0; }, function () { return (input.EndTime.toISOString().split(".")[0] + "Z").toString(); }],
                    "next-token": [, input.NextToken],
                    "page-size": [, input.PageSize],
                    "start-time": [
                        function () { return input.StartTime !== void 0; },
                        function () { return (input.StartTime.toISOString().split(".")[0] + "Z").toString(); },
                    ],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetJourneyExecutionActivityMetricsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/apps/{ApplicationId}/journeys/{JourneyId}/activities/{JourneyActivityId}/execution-metrics";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "JourneyActivityId", function () { return input.JourneyActivityId; }, "{JourneyActivityId}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "JourneyId", function () { return input.JourneyId; }, "{JourneyId}", false);
                query = map({
                    "next-token": [, input.NextToken],
                    "page-size": [, input.PageSize],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetJourneyExecutionMetricsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/apps/{ApplicationId}/journeys/{JourneyId}/execution-metrics";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "JourneyId", function () { return input.JourneyId; }, "{JourneyId}", false);
                query = map({
                    "next-token": [, input.NextToken],
                    "page-size": [, input.PageSize],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetPushTemplateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/templates/{TemplateName}/push";
                resolvedPath = __resolvedPath(resolvedPath, input, "TemplateName", function () { return input.TemplateName; }, "{TemplateName}", false);
                query = map({
                    version: [, input.Version],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetRecommenderConfigurationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/recommenders/{RecommenderId}";
                resolvedPath = __resolvedPath(resolvedPath, input, "RecommenderId", function () { return input.RecommenderId; }, "{RecommenderId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetRecommenderConfigurationsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/recommenders";
                query = map({
                    "page-size": [, input.PageSize],
                    token: [, input.Token],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetSegmentCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/apps/{ApplicationId}/segments/{SegmentId}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "SegmentId", function () { return input.SegmentId; }, "{SegmentId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetSegmentExportJobsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/apps/{ApplicationId}/segments/{SegmentId}/jobs/export";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "SegmentId", function () { return input.SegmentId; }, "{SegmentId}", false);
                query = map({
                    "page-size": [, input.PageSize],
                    token: [, input.Token],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetSegmentImportJobsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/apps/{ApplicationId}/segments/{SegmentId}/jobs/import";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "SegmentId", function () { return input.SegmentId; }, "{SegmentId}", false);
                query = map({
                    "page-size": [, input.PageSize],
                    token: [, input.Token],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetSegmentsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/segments";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                query = map({
                    "page-size": [, input.PageSize],
                    token: [, input.Token],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetSegmentVersionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/apps/{ApplicationId}/segments/{SegmentId}/versions/{Version}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "SegmentId", function () { return input.SegmentId; }, "{SegmentId}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "Version", function () { return input.Version; }, "{Version}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetSegmentVersionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/apps/{ApplicationId}/segments/{SegmentId}/versions";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "SegmentId", function () { return input.SegmentId; }, "{SegmentId}", false);
                query = map({
                    "page-size": [, input.PageSize],
                    token: [, input.Token],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetSmsChannelCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/channels/sms";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetSmsTemplateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/templates/{TemplateName}/sms";
                resolvedPath = __resolvedPath(resolvedPath, input, "TemplateName", function () { return input.TemplateName; }, "{TemplateName}", false);
                query = map({
                    version: [, input.Version],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetUserEndpointsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/users/{UserId}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "UserId", function () { return input.UserId; }, "{UserId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetVoiceChannelCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/channels/voice";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetVoiceTemplateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/templates/{TemplateName}/voice";
                resolvedPath = __resolvedPath(resolvedPath, input, "TemplateName", function () { return input.TemplateName; }, "{TemplateName}", false);
                query = map({
                    version: [, input.Version],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1ListJourneysCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/journeys";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                query = map({
                    "page-size": [, input.PageSize],
                    token: [, input.Token],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1ListTagsForResourceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/tags/{ResourceArn}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ResourceArn", function () { return input.ResourceArn; }, "{ResourceArn}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1ListTemplatesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/templates";
                query = map({
                    "next-token": [, input.NextToken],
                    "page-size": [, input.PageSize],
                    prefix: [, input.Prefix],
                    "template-type": [, input.TemplateType],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1ListTemplateVersionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/templates/{TemplateName}/{TemplateType}/versions";
                resolvedPath = __resolvedPath(resolvedPath, input, "TemplateName", function () { return input.TemplateName; }, "{TemplateName}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "TemplateType", function () { return input.TemplateType; }, "{TemplateType}", false);
                query = map({
                    "next-token": [, input.NextToken],
                    "page-size": [, input.PageSize],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1PhoneNumberValidateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/phone/number/validate";
                if (input.NumberValidateRequest !== undefined) {
                    body = serializeAws_restJson1NumberValidateRequest(input.NumberValidateRequest, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1PutEventsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/events";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                if (input.EventsRequest !== undefined) {
                    body = serializeAws_restJson1EventsRequest(input.EventsRequest, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1PutEventStreamCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/eventstream";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                if (input.WriteEventStream !== undefined) {
                    body = serializeAws_restJson1WriteEventStream(input.WriteEventStream, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1RemoveAttributesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/apps/{ApplicationId}/attributes/{AttributeType}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "AttributeType", function () { return input.AttributeType; }, "{AttributeType}", false);
                if (input.UpdateAttributesRequest !== undefined) {
                    body = serializeAws_restJson1UpdateAttributesRequest(input.UpdateAttributesRequest, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1SendMessagesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/messages";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                if (input.MessageRequest !== undefined) {
                    body = serializeAws_restJson1MessageRequest(input.MessageRequest, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1SendOTPMessageCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/otp";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                if (input.SendOTPMessageRequestParameters !== undefined) {
                    body = serializeAws_restJson1SendOTPMessageRequestParameters(input.SendOTPMessageRequestParameters, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1SendUsersMessagesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/users-messages";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                if (input.SendUsersMessageRequest !== undefined) {
                    body = serializeAws_restJson1SendUsersMessageRequest(input.SendUsersMessageRequest, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1TagResourceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/tags/{ResourceArn}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ResourceArn", function () { return input.ResourceArn; }, "{ResourceArn}", false);
                if (input.TagsModel !== undefined) {
                    body = serializeAws_restJson1TagsModel(input.TagsModel, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1UntagResourceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/tags/{ResourceArn}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ResourceArn", function () { return input.ResourceArn; }, "{ResourceArn}", false);
                query = map({
                    tagKeys: [function () { return input.TagKeys !== void 0; }, function () { return (input.TagKeys || []).map(function (_entry) { return _entry; }); }],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1UpdateAdmChannelCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/channels/adm";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                if (input.ADMChannelRequest !== undefined) {
                    body = serializeAws_restJson1ADMChannelRequest(input.ADMChannelRequest, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1UpdateApnsChannelCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/channels/apns";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                if (input.APNSChannelRequest !== undefined) {
                    body = serializeAws_restJson1APNSChannelRequest(input.APNSChannelRequest, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1UpdateApnsSandboxChannelCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/apps/{ApplicationId}/channels/apns_sandbox";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                if (input.APNSSandboxChannelRequest !== undefined) {
                    body = serializeAws_restJson1APNSSandboxChannelRequest(input.APNSSandboxChannelRequest, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1UpdateApnsVoipChannelCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/apps/{ApplicationId}/channels/apns_voip";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                if (input.APNSVoipChannelRequest !== undefined) {
                    body = serializeAws_restJson1APNSVoipChannelRequest(input.APNSVoipChannelRequest, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1UpdateApnsVoipSandboxChannelCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/apps/{ApplicationId}/channels/apns_voip_sandbox";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                if (input.APNSVoipSandboxChannelRequest !== undefined) {
                    body = serializeAws_restJson1APNSVoipSandboxChannelRequest(input.APNSVoipSandboxChannelRequest, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1UpdateApplicationSettingsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/settings";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                if (input.WriteApplicationSettingsRequest !== undefined) {
                    body = serializeAws_restJson1WriteApplicationSettingsRequest(input.WriteApplicationSettingsRequest, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1UpdateBaiduChannelCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/channels/baidu";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                if (input.BaiduChannelRequest !== undefined) {
                    body = serializeAws_restJson1BaiduChannelRequest(input.BaiduChannelRequest, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1UpdateCampaignCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/apps/{ApplicationId}/campaigns/{CampaignId}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "CampaignId", function () { return input.CampaignId; }, "{CampaignId}", false);
                if (input.WriteCampaignRequest !== undefined) {
                    body = serializeAws_restJson1WriteCampaignRequest(input.WriteCampaignRequest, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1UpdateEmailChannelCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/channels/email";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                if (input.EmailChannelRequest !== undefined) {
                    body = serializeAws_restJson1EmailChannelRequest(input.EmailChannelRequest, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1UpdateEmailTemplateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/templates/{TemplateName}/email";
                resolvedPath = __resolvedPath(resolvedPath, input, "TemplateName", function () { return input.TemplateName; }, "{TemplateName}", false);
                query = map({
                    "create-new-version": [function () { return input.CreateNewVersion !== void 0; }, function () { return input.CreateNewVersion.toString(); }],
                    version: [, input.Version],
                });
                if (input.EmailTemplateRequest !== undefined) {
                    body = serializeAws_restJson1EmailTemplateRequest(input.EmailTemplateRequest, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1UpdateEndpointCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/apps/{ApplicationId}/endpoints/{EndpointId}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "EndpointId", function () { return input.EndpointId; }, "{EndpointId}", false);
                if (input.EndpointRequest !== undefined) {
                    body = serializeAws_restJson1EndpointRequest(input.EndpointRequest, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1UpdateEndpointsBatchCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/endpoints";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                if (input.EndpointBatchRequest !== undefined) {
                    body = serializeAws_restJson1EndpointBatchRequest(input.EndpointBatchRequest, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1UpdateGcmChannelCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/channels/gcm";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                if (input.GCMChannelRequest !== undefined) {
                    body = serializeAws_restJson1GCMChannelRequest(input.GCMChannelRequest, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1UpdateInAppTemplateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/templates/{TemplateName}/inapp";
                resolvedPath = __resolvedPath(resolvedPath, input, "TemplateName", function () { return input.TemplateName; }, "{TemplateName}", false);
                query = map({
                    "create-new-version": [function () { return input.CreateNewVersion !== void 0; }, function () { return input.CreateNewVersion.toString(); }],
                    version: [, input.Version],
                });
                if (input.InAppTemplateRequest !== undefined) {
                    body = serializeAws_restJson1InAppTemplateRequest(input.InAppTemplateRequest, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1UpdateJourneyCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/apps/{ApplicationId}/journeys/{JourneyId}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "JourneyId", function () { return input.JourneyId; }, "{JourneyId}", false);
                if (input.WriteJourneyRequest !== undefined) {
                    body = serializeAws_restJson1WriteJourneyRequest(input.WriteJourneyRequest, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1UpdateJourneyStateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/apps/{ApplicationId}/journeys/{JourneyId}/state";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "JourneyId", function () { return input.JourneyId; }, "{JourneyId}", false);
                if (input.JourneyStateRequest !== undefined) {
                    body = serializeAws_restJson1JourneyStateRequest(input.JourneyStateRequest, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1UpdatePushTemplateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/templates/{TemplateName}/push";
                resolvedPath = __resolvedPath(resolvedPath, input, "TemplateName", function () { return input.TemplateName; }, "{TemplateName}", false);
                query = map({
                    "create-new-version": [function () { return input.CreateNewVersion !== void 0; }, function () { return input.CreateNewVersion.toString(); }],
                    version: [, input.Version],
                });
                if (input.PushNotificationTemplateRequest !== undefined) {
                    body = serializeAws_restJson1PushNotificationTemplateRequest(input.PushNotificationTemplateRequest, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1UpdateRecommenderConfigurationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/recommenders/{RecommenderId}";
                resolvedPath = __resolvedPath(resolvedPath, input, "RecommenderId", function () { return input.RecommenderId; }, "{RecommenderId}", false);
                if (input.UpdateRecommenderConfiguration !== undefined) {
                    body = serializeAws_restJson1UpdateRecommenderConfigurationShape(input.UpdateRecommenderConfiguration, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1UpdateSegmentCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/apps/{ApplicationId}/segments/{SegmentId}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "SegmentId", function () { return input.SegmentId; }, "{SegmentId}", false);
                if (input.WriteSegmentRequest !== undefined) {
                    body = serializeAws_restJson1WriteSegmentRequest(input.WriteSegmentRequest, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1UpdateSmsChannelCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/channels/sms";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                if (input.SMSChannelRequest !== undefined) {
                    body = serializeAws_restJson1SMSChannelRequest(input.SMSChannelRequest, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1UpdateSmsTemplateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/templates/{TemplateName}/sms";
                resolvedPath = __resolvedPath(resolvedPath, input, "TemplateName", function () { return input.TemplateName; }, "{TemplateName}", false);
                query = map({
                    "create-new-version": [function () { return input.CreateNewVersion !== void 0; }, function () { return input.CreateNewVersion.toString(); }],
                    version: [, input.Version],
                });
                if (input.SMSTemplateRequest !== undefined) {
                    body = serializeAws_restJson1SMSTemplateRequest(input.SMSTemplateRequest, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1UpdateTemplateActiveVersionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/v1/templates/{TemplateName}/{TemplateType}/active-version";
                resolvedPath = __resolvedPath(resolvedPath, input, "TemplateName", function () { return input.TemplateName; }, "{TemplateName}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "TemplateType", function () { return input.TemplateType; }, "{TemplateType}", false);
                if (input.TemplateActiveVersionRequest !== undefined) {
                    body = serializeAws_restJson1TemplateActiveVersionRequest(input.TemplateActiveVersionRequest, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1UpdateVoiceChannelCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/channels/voice";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                if (input.VoiceChannelRequest !== undefined) {
                    body = serializeAws_restJson1VoiceChannelRequest(input.VoiceChannelRequest, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1UpdateVoiceTemplateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/templates/{TemplateName}/voice";
                resolvedPath = __resolvedPath(resolvedPath, input, "TemplateName", function () { return input.TemplateName; }, "{TemplateName}", false);
                query = map({
                    "create-new-version": [function () { return input.CreateNewVersion !== void 0; }, function () { return input.CreateNewVersion.toString(); }],
                    version: [, input.Version],
                });
                if (input.VoiceTemplateRequest !== undefined) {
                    body = serializeAws_restJson1VoiceTemplateRequest(input.VoiceTemplateRequest, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1VerifyOTPMessageCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/v1/apps/{ApplicationId}/verify-otp";
                resolvedPath = __resolvedPath(resolvedPath, input, "ApplicationId", function () { return input.ApplicationId; }, "{ApplicationId}", false);
                if (input.VerifyOTPMessageRequestParameters !== undefined) {
                    body = serializeAws_restJson1VerifyOTPMessageRequestParameters(input.VerifyOTPMessageRequestParameters, context);
                }
                if (body === undefined) {
                    body = {};
                }
                body = JSON.stringify(body);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var deserializeAws_restJson1CreateAppCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 201 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1CreateAppCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.ApplicationResponse = deserializeAws_restJson1ApplicationResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1CreateAppCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1CreateCampaignCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 201 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1CreateCampaignCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.CampaignResponse = deserializeAws_restJson1CampaignResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1CreateCampaignCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1CreateEmailTemplateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 201 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1CreateEmailTemplateCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.CreateTemplateMessageBody = deserializeAws_restJson1CreateTemplateMessageBody(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1CreateEmailTemplateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "TooManyRequestsException": return [3, 10];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 10];
                }
                return [3, 12];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 13;
            case 13: return [2];
        }
    });
}); };
export var deserializeAws_restJson1CreateExportJobCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 202 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1CreateExportJobCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.ExportJobResponse = deserializeAws_restJson1ExportJobResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1CreateExportJobCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1CreateImportJobCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 201 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1CreateImportJobCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.ImportJobResponse = deserializeAws_restJson1ImportJobResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1CreateImportJobCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1CreateInAppTemplateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 201 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1CreateInAppTemplateCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.TemplateCreateMessageBody = deserializeAws_restJson1TemplateCreateMessageBody(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1CreateInAppTemplateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "TooManyRequestsException": return [3, 10];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 10];
                }
                return [3, 12];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 13;
            case 13: return [2];
        }
    });
}); };
export var deserializeAws_restJson1CreateJourneyCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 201 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1CreateJourneyCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.JourneyResponse = deserializeAws_restJson1JourneyResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1CreateJourneyCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1CreatePushTemplateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 201 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1CreatePushTemplateCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.CreateTemplateMessageBody = deserializeAws_restJson1CreateTemplateMessageBody(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1CreatePushTemplateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "TooManyRequestsException": return [3, 10];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 10];
                }
                return [3, 12];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 13;
            case 13: return [2];
        }
    });
}); };
export var deserializeAws_restJson1CreateRecommenderConfigurationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 201 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1CreateRecommenderConfigurationCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.RecommenderConfigurationResponse = deserializeAws_restJson1RecommenderConfigurationResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1CreateRecommenderConfigurationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1CreateSegmentCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 201 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1CreateSegmentCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.SegmentResponse = deserializeAws_restJson1SegmentResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1CreateSegmentCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1CreateSmsTemplateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 201 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1CreateSmsTemplateCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.CreateTemplateMessageBody = deserializeAws_restJson1CreateTemplateMessageBody(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1CreateSmsTemplateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "TooManyRequestsException": return [3, 10];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 10];
                }
                return [3, 12];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 13;
            case 13: return [2];
        }
    });
}); };
export var deserializeAws_restJson1CreateVoiceTemplateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 201 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1CreateVoiceTemplateCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.CreateTemplateMessageBody = deserializeAws_restJson1CreateTemplateMessageBody(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1CreateVoiceTemplateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "TooManyRequestsException": return [3, 10];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 10];
                }
                return [3, 12];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 13;
            case 13: return [2];
        }
    });
}); };
export var deserializeAws_restJson1DeleteAdmChannelCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DeleteAdmChannelCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.ADMChannelResponse = deserializeAws_restJson1ADMChannelResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1DeleteAdmChannelCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1DeleteApnsChannelCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DeleteApnsChannelCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.APNSChannelResponse = deserializeAws_restJson1APNSChannelResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1DeleteApnsChannelCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1DeleteApnsSandboxChannelCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DeleteApnsSandboxChannelCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.APNSSandboxChannelResponse = deserializeAws_restJson1APNSSandboxChannelResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1DeleteApnsSandboxChannelCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1DeleteApnsVoipChannelCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DeleteApnsVoipChannelCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.APNSVoipChannelResponse = deserializeAws_restJson1APNSVoipChannelResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1DeleteApnsVoipChannelCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1DeleteApnsVoipSandboxChannelCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DeleteApnsVoipSandboxChannelCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.APNSVoipSandboxChannelResponse = deserializeAws_restJson1APNSVoipSandboxChannelResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1DeleteApnsVoipSandboxChannelCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1DeleteAppCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DeleteAppCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.ApplicationResponse = deserializeAws_restJson1ApplicationResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1DeleteAppCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1DeleteBaiduChannelCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DeleteBaiduChannelCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.BaiduChannelResponse = deserializeAws_restJson1BaiduChannelResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1DeleteBaiduChannelCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1DeleteCampaignCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DeleteCampaignCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.CampaignResponse = deserializeAws_restJson1CampaignResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1DeleteCampaignCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1DeleteEmailChannelCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DeleteEmailChannelCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.EmailChannelResponse = deserializeAws_restJson1EmailChannelResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1DeleteEmailChannelCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1DeleteEmailTemplateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 202 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DeleteEmailTemplateCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.MessageBody = deserializeAws_restJson1MessageBody(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1DeleteEmailTemplateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1DeleteEndpointCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 202 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DeleteEndpointCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.EndpointResponse = deserializeAws_restJson1EndpointResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1DeleteEndpointCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1DeleteEventStreamCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DeleteEventStreamCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.EventStream = deserializeAws_restJson1EventStream(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1DeleteEventStreamCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1DeleteGcmChannelCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DeleteGcmChannelCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.GCMChannelResponse = deserializeAws_restJson1GCMChannelResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1DeleteGcmChannelCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1DeleteInAppTemplateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 202 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DeleteInAppTemplateCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.MessageBody = deserializeAws_restJson1MessageBody(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1DeleteInAppTemplateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1DeleteJourneyCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DeleteJourneyCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.JourneyResponse = deserializeAws_restJson1JourneyResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1DeleteJourneyCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1DeletePushTemplateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 202 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DeletePushTemplateCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.MessageBody = deserializeAws_restJson1MessageBody(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1DeletePushTemplateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1DeleteRecommenderConfigurationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DeleteRecommenderConfigurationCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.RecommenderConfigurationResponse = deserializeAws_restJson1RecommenderConfigurationResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1DeleteRecommenderConfigurationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1DeleteSegmentCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DeleteSegmentCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.SegmentResponse = deserializeAws_restJson1SegmentResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1DeleteSegmentCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1DeleteSmsChannelCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DeleteSmsChannelCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.SMSChannelResponse = deserializeAws_restJson1SMSChannelResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1DeleteSmsChannelCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1DeleteSmsTemplateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 202 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DeleteSmsTemplateCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.MessageBody = deserializeAws_restJson1MessageBody(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1DeleteSmsTemplateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1DeleteUserEndpointsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 202 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DeleteUserEndpointsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.EndpointsResponse = deserializeAws_restJson1EndpointsResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1DeleteUserEndpointsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1DeleteVoiceChannelCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DeleteVoiceChannelCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.VoiceChannelResponse = deserializeAws_restJson1VoiceChannelResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1DeleteVoiceChannelCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1DeleteVoiceTemplateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 202 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DeleteVoiceTemplateCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.MessageBody = deserializeAws_restJson1MessageBody(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1DeleteVoiceTemplateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetAdmChannelCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetAdmChannelCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.ADMChannelResponse = deserializeAws_restJson1ADMChannelResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetAdmChannelCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetApnsChannelCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetApnsChannelCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.APNSChannelResponse = deserializeAws_restJson1APNSChannelResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetApnsChannelCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetApnsSandboxChannelCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetApnsSandboxChannelCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.APNSSandboxChannelResponse = deserializeAws_restJson1APNSSandboxChannelResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetApnsSandboxChannelCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetApnsVoipChannelCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetApnsVoipChannelCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.APNSVoipChannelResponse = deserializeAws_restJson1APNSVoipChannelResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetApnsVoipChannelCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetApnsVoipSandboxChannelCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetApnsVoipSandboxChannelCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.APNSVoipSandboxChannelResponse = deserializeAws_restJson1APNSVoipSandboxChannelResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetApnsVoipSandboxChannelCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetAppCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetAppCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.ApplicationResponse = deserializeAws_restJson1ApplicationResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetAppCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetApplicationDateRangeKpiCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetApplicationDateRangeKpiCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.ApplicationDateRangeKpiResponse = deserializeAws_restJson1ApplicationDateRangeKpiResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetApplicationDateRangeKpiCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetApplicationSettingsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetApplicationSettingsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.ApplicationSettingsResource = deserializeAws_restJson1ApplicationSettingsResource(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetApplicationSettingsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetAppsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetAppsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.ApplicationsResponse = deserializeAws_restJson1ApplicationsResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetAppsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetBaiduChannelCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetBaiduChannelCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.BaiduChannelResponse = deserializeAws_restJson1BaiduChannelResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetBaiduChannelCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetCampaignCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetCampaignCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.CampaignResponse = deserializeAws_restJson1CampaignResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetCampaignCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetCampaignActivitiesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetCampaignActivitiesCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.ActivitiesResponse = deserializeAws_restJson1ActivitiesResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetCampaignActivitiesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetCampaignDateRangeKpiCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetCampaignDateRangeKpiCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.CampaignDateRangeKpiResponse = deserializeAws_restJson1CampaignDateRangeKpiResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetCampaignDateRangeKpiCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetCampaignsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetCampaignsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.CampaignsResponse = deserializeAws_restJson1CampaignsResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetCampaignsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetCampaignVersionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetCampaignVersionCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.CampaignResponse = deserializeAws_restJson1CampaignResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetCampaignVersionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetCampaignVersionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetCampaignVersionsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.CampaignsResponse = deserializeAws_restJson1CampaignsResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetCampaignVersionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetChannelsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetChannelsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.ChannelsResponse = deserializeAws_restJson1ChannelsResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetChannelsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetEmailChannelCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetEmailChannelCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.EmailChannelResponse = deserializeAws_restJson1EmailChannelResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetEmailChannelCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetEmailTemplateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetEmailTemplateCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.EmailTemplateResponse = deserializeAws_restJson1EmailTemplateResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetEmailTemplateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetEndpointCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetEndpointCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.EndpointResponse = deserializeAws_restJson1EndpointResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetEndpointCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetEventStreamCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetEventStreamCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.EventStream = deserializeAws_restJson1EventStream(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetEventStreamCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetExportJobCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetExportJobCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.ExportJobResponse = deserializeAws_restJson1ExportJobResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetExportJobCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetExportJobsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetExportJobsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.ExportJobsResponse = deserializeAws_restJson1ExportJobsResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetExportJobsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetGcmChannelCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetGcmChannelCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.GCMChannelResponse = deserializeAws_restJson1GCMChannelResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetGcmChannelCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetImportJobCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetImportJobCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.ImportJobResponse = deserializeAws_restJson1ImportJobResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetImportJobCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetImportJobsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetImportJobsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.ImportJobsResponse = deserializeAws_restJson1ImportJobsResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetImportJobsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetInAppMessagesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetInAppMessagesCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.InAppMessagesResponse = deserializeAws_restJson1InAppMessagesResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetInAppMessagesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetInAppTemplateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetInAppTemplateCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.InAppTemplateResponse = deserializeAws_restJson1InAppTemplateResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetInAppTemplateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetJourneyCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetJourneyCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.JourneyResponse = deserializeAws_restJson1JourneyResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetJourneyCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetJourneyDateRangeKpiCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetJourneyDateRangeKpiCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.JourneyDateRangeKpiResponse = deserializeAws_restJson1JourneyDateRangeKpiResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetJourneyDateRangeKpiCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetJourneyExecutionActivityMetricsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetJourneyExecutionActivityMetricsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.JourneyExecutionActivityMetricsResponse = deserializeAws_restJson1JourneyExecutionActivityMetricsResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetJourneyExecutionActivityMetricsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetJourneyExecutionMetricsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetJourneyExecutionMetricsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.JourneyExecutionMetricsResponse = deserializeAws_restJson1JourneyExecutionMetricsResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetJourneyExecutionMetricsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetPushTemplateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetPushTemplateCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.PushNotificationTemplateResponse = deserializeAws_restJson1PushNotificationTemplateResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetPushTemplateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetRecommenderConfigurationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetRecommenderConfigurationCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.RecommenderConfigurationResponse = deserializeAws_restJson1RecommenderConfigurationResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetRecommenderConfigurationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetRecommenderConfigurationsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetRecommenderConfigurationsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.ListRecommenderConfigurationsResponse = deserializeAws_restJson1ListRecommenderConfigurationsResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetRecommenderConfigurationsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetSegmentCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetSegmentCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.SegmentResponse = deserializeAws_restJson1SegmentResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetSegmentCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetSegmentExportJobsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetSegmentExportJobsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.ExportJobsResponse = deserializeAws_restJson1ExportJobsResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetSegmentExportJobsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetSegmentImportJobsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetSegmentImportJobsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.ImportJobsResponse = deserializeAws_restJson1ImportJobsResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetSegmentImportJobsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetSegmentsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetSegmentsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.SegmentsResponse = deserializeAws_restJson1SegmentsResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetSegmentsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetSegmentVersionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetSegmentVersionCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.SegmentResponse = deserializeAws_restJson1SegmentResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetSegmentVersionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetSegmentVersionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetSegmentVersionsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.SegmentsResponse = deserializeAws_restJson1SegmentsResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetSegmentVersionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetSmsChannelCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetSmsChannelCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.SMSChannelResponse = deserializeAws_restJson1SMSChannelResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetSmsChannelCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetSmsTemplateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetSmsTemplateCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.SMSTemplateResponse = deserializeAws_restJson1SMSTemplateResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetSmsTemplateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetUserEndpointsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetUserEndpointsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.EndpointsResponse = deserializeAws_restJson1EndpointsResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetUserEndpointsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetVoiceChannelCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetVoiceChannelCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.VoiceChannelResponse = deserializeAws_restJson1VoiceChannelResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetVoiceChannelCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1GetVoiceTemplateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetVoiceTemplateCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.VoiceTemplateResponse = deserializeAws_restJson1VoiceTemplateResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1GetVoiceTemplateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1ListJourneysCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1ListJourneysCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.JourneysResponse = deserializeAws_restJson1JourneysResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1ListJourneysCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1ListTagsForResourceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1ListTagsForResourceCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.TagsModel = deserializeAws_restJson1TagsModel(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1ListTagsForResourceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
export var deserializeAws_restJson1ListTemplatesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1ListTemplatesCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.TemplatesResponse = deserializeAws_restJson1TemplatesResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1ListTemplatesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "TooManyRequestsException": return [3, 10];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 10];
                }
                return [3, 12];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 13;
            case 13: return [2];
        }
    });
}); };
export var deserializeAws_restJson1ListTemplateVersionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1ListTemplateVersionsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.TemplateVersionsResponse = deserializeAws_restJson1TemplateVersionsResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1ListTemplateVersionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1PhoneNumberValidateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1PhoneNumberValidateCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.NumberValidateResponse = deserializeAws_restJson1NumberValidateResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1PhoneNumberValidateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1PutEventsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 202 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1PutEventsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.EventsResponse = deserializeAws_restJson1EventsResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1PutEventsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1PutEventStreamCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1PutEventStreamCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.EventStream = deserializeAws_restJson1EventStream(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1PutEventStreamCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1RemoveAttributesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1RemoveAttributesCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.AttributesResource = deserializeAws_restJson1AttributesResource(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1RemoveAttributesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1SendMessagesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1SendMessagesCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.MessageResponse = deserializeAws_restJson1MessageResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1SendMessagesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1SendOTPMessageCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1SendOTPMessageCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.MessageResponse = deserializeAws_restJson1MessageResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1SendOTPMessageCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1SendUsersMessagesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1SendUsersMessagesCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.SendUsersMessageResponse = deserializeAws_restJson1SendUsersMessageResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1SendUsersMessagesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1TagResourceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 204 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1TagResourceCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1TagResourceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
export var deserializeAws_restJson1UntagResourceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 204 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1UntagResourceCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1UntagResourceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
export var deserializeAws_restJson1UpdateAdmChannelCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1UpdateAdmChannelCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.ADMChannelResponse = deserializeAws_restJson1ADMChannelResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1UpdateAdmChannelCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1UpdateApnsChannelCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1UpdateApnsChannelCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.APNSChannelResponse = deserializeAws_restJson1APNSChannelResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1UpdateApnsChannelCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1UpdateApnsSandboxChannelCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1UpdateApnsSandboxChannelCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.APNSSandboxChannelResponse = deserializeAws_restJson1APNSSandboxChannelResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1UpdateApnsSandboxChannelCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1UpdateApnsVoipChannelCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1UpdateApnsVoipChannelCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.APNSVoipChannelResponse = deserializeAws_restJson1APNSVoipChannelResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1UpdateApnsVoipChannelCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1UpdateApnsVoipSandboxChannelCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1UpdateApnsVoipSandboxChannelCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.APNSVoipSandboxChannelResponse = deserializeAws_restJson1APNSVoipSandboxChannelResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1UpdateApnsVoipSandboxChannelCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1UpdateApplicationSettingsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1UpdateApplicationSettingsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.ApplicationSettingsResource = deserializeAws_restJson1ApplicationSettingsResource(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1UpdateApplicationSettingsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1UpdateBaiduChannelCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1UpdateBaiduChannelCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.BaiduChannelResponse = deserializeAws_restJson1BaiduChannelResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1UpdateBaiduChannelCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1UpdateCampaignCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1UpdateCampaignCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.CampaignResponse = deserializeAws_restJson1CampaignResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1UpdateCampaignCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1UpdateEmailChannelCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1UpdateEmailChannelCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.EmailChannelResponse = deserializeAws_restJson1EmailChannelResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1UpdateEmailChannelCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1UpdateEmailTemplateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 202 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1UpdateEmailTemplateCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.MessageBody = deserializeAws_restJson1MessageBody(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1UpdateEmailTemplateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1UpdateEndpointCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 202 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1UpdateEndpointCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.MessageBody = deserializeAws_restJson1MessageBody(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1UpdateEndpointCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1UpdateEndpointsBatchCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 202 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1UpdateEndpointsBatchCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.MessageBody = deserializeAws_restJson1MessageBody(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1UpdateEndpointsBatchCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1UpdateGcmChannelCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1UpdateGcmChannelCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.GCMChannelResponse = deserializeAws_restJson1GCMChannelResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1UpdateGcmChannelCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1UpdateInAppTemplateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 202 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1UpdateInAppTemplateCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.MessageBody = deserializeAws_restJson1MessageBody(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1UpdateInAppTemplateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1UpdateJourneyCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1UpdateJourneyCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.JourneyResponse = deserializeAws_restJson1JourneyResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1UpdateJourneyCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ConflictException": return [3, 4];
                    case "com.amazonaws.pinpoint#ConflictException": return [3, 4];
                    case "ForbiddenException": return [3, 6];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 6];
                    case "InternalServerErrorException": return [3, 8];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 8];
                    case "MethodNotAllowedException": return [3, 10];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 10];
                    case "NotFoundException": return [3, 12];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 12];
                    case "PayloadTooLargeException": return [3, 14];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 14];
                    case "TooManyRequestsException": return [3, 16];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 16];
                }
                return [3, 18];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 17: throw _d.sent();
            case 18:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 19;
            case 19: return [2];
        }
    });
}); };
export var deserializeAws_restJson1UpdateJourneyStateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1UpdateJourneyStateCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.JourneyResponse = deserializeAws_restJson1JourneyResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1UpdateJourneyStateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1UpdatePushTemplateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 202 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1UpdatePushTemplateCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.MessageBody = deserializeAws_restJson1MessageBody(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1UpdatePushTemplateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1UpdateRecommenderConfigurationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1UpdateRecommenderConfigurationCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.RecommenderConfigurationResponse = deserializeAws_restJson1RecommenderConfigurationResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1UpdateRecommenderConfigurationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1MethodNotAllowedExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1UpdateSegmentCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1UpdateSegmentCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.sent()]);
                contents.SegmentResponse = deserializeAws_restJson1SegmentResponse(data, context);
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1UpdateSegmentCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseErrorBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.pinpoint#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.pinpoint#ForbiddenException": return [3, 4];
                    case "InternalServerErrorException": return [3, 6];
                    case "com.amazonaws.pinpoint#InternalServerErrorException": return [3, 6];
                    case "MethodNotAllowedException": return [3, 8];
                    case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.pinpoint#NotFoundException": return [3, 10];
                    case "PayloadTooLargeException": return [3, 12];
                    case "com.amazonaws.pinpoint#PayloadTooLargeException": return [3, 12];
                    case "TooManyRequestsException": return [3, 14];
                    case "com.amazonaws.pinpoint#TooManyRequestsException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
    